h1. Panako - Acoustic Fingerprinting

Panako is an "acoustic fingerprinting":https://en.wikipedia.org/wiki/Acoustic_fingerprint system. The system is able to extract fingerprints from an audio stream, and either store those fingerprints in a database, or find a match between the extracted fingerprints and stored fingerprints.  Several acoustic fingerprinting algorithms are implemented within Panako. The main algorithm, the Panako algorithm, has the feature that audio queries can be identified reliably and quickly even if they has been sped up, time stretched or pitch shifted with respect to the reference audio. The main focus of Panako is to serve as a demonstration of the Panako algorithm. Other acoustic fingerprinting schemes are implemented to serve as a baseline for comparison. More information can be found in the "article about Panako":http://www.terasoft.com.tw/conf/ismir2014/proceedings/T048_122_Paper.pdf.

Please be aware of the patents "US7627477 B2":https://www.google.com/patents/US7627477 and "US6990453":https://www.google.com/patents/US6990453 and "perhaps others":http://www.shazam.com/music/web/productfeatures.html?id=1284. They describe techniques used in some algorithms implemented within Panako. The patents limit the use of some algorithms  under various conditions and for several regions. Please make sure to consult your intellectual property rights specialist if you are in doubt about these restrictions. If these restrictions apply, respect the patent holders rights. The first aim of Panako is to serve as a research platform to experiment with and improve fingerprinting algorithms.

This document covers installation, usage and configuration of Panako.

The Panako source code is licensed under the "GNU Affero General Public License":https://www.gnu.org/licenses/agpl-3.0.html.

h2. Overview

# "Why Panako?":#why
# "Getting Started":#getting_started
# "Usage":#usage
## "Store Fingerprints":#store
## "Query for Matches":#query
## "Monitor Stream for Matches":#monitor
## "Print Storage Statistics":#stats
## "Print Configuration":#configuration
# "Further reading":#read
# "Credits":#credits
# "Reproduce the ISMIR Paper Results":#ismir
# "Changelog":#changelog

h2(#why). Why Panako?

Content based music search algorithms make it possible to identify a small audio fragment in a digital music archive with potentially millions of songs. Current search algorithms are able to respond quickly and reliably on an audio query, even if there is noise or other distortions present. During the last decades they have been used successfully as digital music archive management tools, music identification services for smartphones or for digital rights management. 

<div align="center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="615px" height="141px" viewBox="-0.5 -0.5 615 141" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2021-06-07T08:40:37.338Z&quot; agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.3 Chrome/80.0.3987.158 Electron/8.2.0 Safari/537.36&quot; etag=&quot;lmcXfeySvw7pPP3ktOHL&quot; version=&quot;12.9.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;TVP4SeK73AFzj_BVLSsy&quot; name=&quot;Page-1&quot;&gt;7VlZc9owEP41PKaDbQzkkRByTJNJM0ynyaOwFluNsKgsc/TXV7YlfMgcTSEwpOQh2k/37n67q3HD6U8WtxxNg0eGgTbsJl40nOuGbVtNx5H/EmSZIY7VzACfE6wG5cCQ/AY9U6ExwRCVBgrGqCDTMuixMARPlDDEOZuXh40ZLe86RT4YwNBD1ER/ECyCDO3anRy/A+IHemerfZn1TJAerG4SBQizeQFyBg2nzxkTWWuy6ANNlKf1ks27WdO7OhiHUOwy4flezL/C82zov0TP329nd/3vzoW6xgzRWF1YHVYstQYAS4UokXERMJ+FiA5y9IqzOMSQbNOUUj7mgbGpBC0J/gQhlsq6KBZMQoGYUNULCyJeCu3XZKkvrpKuF2rlVFhqIRR8+VIUCrMSMZ+WSnpedr/kUmv1qKCIxdyDDcrT/oi4D2LDOHdlbUkTYBOQ55HzOFAkyKx8DqT81V+Ny00qG8qqf2Fhyz4JE386tRtavwEkYg4Nu03lqa9GXLb8pDVYCI48QVhoGKas9nlABAynKNXOXMbbsorHhNI+o4ync52xm/xJPBKcvUGhp53+khksFAU8+62MNQMuYLHZXKZ61YSOinpLHReVPC8EUQUFhfjZah7IHi3DHo9IeAEJ/TNSess5Ma13/2eTncOau2NYax0zrLlmWJMUAj7lRN7XCG19FkoixOcW3Gz3xHjW3iHHh7iX1MNS8iiKIuJVWPNOBmi2NQtsszZybZ+lwK6kWWPPgr3cGntpbGduqR2+sZQN2l0uqmHZqfhBdk81q1jCVxayL9f4nV4o04OxUOpTq2v/Q1Fj0r8XY8IMZ5PUEmX3KvM0ZCFUSK0gRIkfSpHCOFkhoSmRr7GegicE4zRL1IWLckDZRxGzleWtGq+xD8Vyy6S5KiqjA1jAk0oCfnQbWN3tsfZjrWC+mQs58Iwt4bRPzBK2Y2a5jysv85Jye8rLk2ueT19L6bQ+uWIUBelZ9/2Evtwxbx612NSn3FTWRAGaJk1vSYm0K99eSY4yB3gYrQDkvfmpWzzFQq4C9SUnRtAde7Ulp9eF0XhfTzi3RDLb5FinhmOdg3HMTPlPIgBu1vqfIwi2KqW/ax85Bna3c2Rr6f+OB/Meg9GaGPMxtblTfcq576zN3epC1SL/wLW5bQbLeyxtQcZE+r/BVo1gMis5S/tXnHyQuEoIe6G415Mj0np81VtdJZqiUGPqRZB1yKsU+wpwurFGzzVauNWSqSac7ylcSDH/lpQ5Vf5Fzhn8AQ==&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 155 115 L 248.63 115" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 253.88 115 L 246.88 118.5 L 248.63 115 L 246.88 111.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 155 115 L 248.63 115" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 253.88 115 L 246.88 118.5 L 248.63 115 L 246.88 111.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="75" y="95" width="80" height="40" fill="#f5f5f5" stroke="#666666" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 115px; margin-left: 76px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Feature<br />Extraction</div></div></div></foreignObject><text x="115" y="119" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Feature...</text></switch></g><rect x="435" y="95" width="80" height="40" fill="#f5f5f5" stroke="#666666" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 115px; margin-left: 436px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Matching</div></div></div></foreignObject><text x="475" y="119" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Matching</text></switch></g><path d="M 335 115 L 428.63 115" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 433.88 115 L 426.88 118.5 L 428.63 115 L 426.88 111.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="255" y="95" width="80" height="40" fill="#f5f5f5" stroke="#666666" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 115px; margin-left: 256px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Fingerprint<br />Construction</div></div></div></foreignObject><text x="295" y="119" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Fingerprint...</text></switch></g><path d="M 12 115 L 68.63 115" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 73.88 115 L 66.88 118.5 L 68.63 115 L 66.88 111.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="12" y="95" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 38px; height: 1px; padding-top: 105px; margin-left: 14px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Audio</div></div></div></foreignObject><text x="14" y="109" fill="#000000" font-family="Helvetica" font-size="12px">Audio</text></switch></g><rect x="185" y="95" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 105px; margin-left: 186px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Features</div></div></div></foreignObject><text x="205" y="109" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Featur...</text></switch></g><rect x="365" y="95" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 105px; margin-left: 366px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Fingerprints</div></div></div></foreignObject><text x="385" y="109" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Finger...</text></switch></g><path d="M 475 75 L 475 88.63" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 475 93.88 L 471.5 86.88 L 475 88.63 L 478.5 86.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 440 19 C 440 0.33 510 0.33 510 19 L 510 61 C 510 79.67 440 79.67 440 61 Z" fill="#dae8fc" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><path d="M 440 19 C 440 33 510 33 510 19" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><rect x="455" y="37" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 47px; margin-left: 456px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Other<br />Fingerprints</div></div></div></foreignObject><text x="475" y="51" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Other...</text></switch></g><path d="M 515 115 L 548.63 115" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 553.88 115 L 546.88 118.5 L 548.63 115 L 546.88 111.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="565" y="105" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 115px; margin-left: 566px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Identified<br /><div style="text-align: left"><span>Audio</span></div></div></div></div></foreignObject><text x="585" y="119" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Identi...</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://desk.draw.io/support/solutions/articles/16000042487" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>
<small>Fig. General content based audio search scheme.</small></div>


Most algorithms, as they are described in the literature, do not allow substantial changes in replay speed. The speed of the audio query needs to be the same as the reference audio for the current algorithms to work. This poses a problem, since changes in replay speed do occur commonly, they are either introduced by accident during an analog to digital conversion or are introduced deliberately. 

Analogue physical media such as wax cylinders, wire recordings, magnetic tapes and grammophone records can be digitized at an incorrect or varying playback speed. Even when calibrated mechanical devices are used in a digitization process, the media could already have been recorded at an undesirable speed. To identify duplicates in a digitized archive, a music search algorithm should compensate for changes in replay speed

Next to accidental speed changes, deliberate speed manipulations are sometimes introduced during radio broadcasts: occasionally songs are played a bit faster to fit into a timeslot. During a DJ-set speed changes are almost always present. To correctly identify audio in these cases as well, a music search algorithm robust against pitch shifting, time stretching and speed changes is desired.

The Panako algorithm allows such changes while maintaining other desired features as scalability, robustness and reliability.  Next to the panako algorithm there is also an implementation of the algorithm described in "An Industrial-Strength Audio Search Algorithm":http://www.ee.columbia.edu/~dpwe/papers/Wang03-shazam.pdf (internally identified as Olaf). Also the algorithm in "A Robust Audio Fingerprinter Based on Pitch Class Histograms - Applications for Ethnic Music Archives":http://0110.be/files/attachments/415/2012.01.20.fingerprinter.submitted.pdf is available. To make comparisons between fingerprinting systems easy, researchers are kindly invited to contribute algorithms to the Panako project.

Alternative open source music identification systems are "audfprint":http://www.ee.columbia.edu/~dpwe/resources/matlab/audfprint/ and "echoprint":http://echoprint.me/. Alternative systems with similar features are described in "US7627477 B2":https://www.google.com/patents/US7627477 and in  "__Quad-based Audio Fingerprinting Robust To Time And Frequency Scaling__ (2014)":http://www.dafx14.fau.de/papers/dafx14_reinhard_sonnleitner_quad_based_audio_fingerpr.pdf by Reinhard Sonnleitner and Gerhard Widmer.


h2(#getting_started). Getting started

To download the latest Panako version, @wget@ needs to be installed on your system. Once downloaded the contents looks like this:  

* @src@ contains the Java source files.
* @lib@ contains the dependencies (JAR-files).
* @build@ contains an ant build file to compile Panako and the documentation. Use @ant release@ to build the source and compile Panako.
* @scripts@ contains helper scripts to analyse results

To compile Panako, the JDK 8 or later is required. See the "installation instructions":http://java.com/en/download/help/index_installing.xml on the Java website, for installation on your operating system.

Panako uses the "Apache Ant":https://ant.apache.org/ build system. Install it on your system. Once ant and the other components are installed correctly the following commands should get you started:

bc. wget http://panako.be/releases/Panako-latest/Panako-latest-src.zip
unzip Panako-latest-src.zip
#sudo apt-get install default-jdk ant libav-tools# Optionally install JDK, ant libav-tools (on Ubuntu).
cd Panako/build
ant #Builds the core Panako library
ant install #Installs Panako in the ~/.panako directory
ant doc #Creates the documentation in doc
sudo cp panako /usr/local/bin #copies the panako startup script to your path

The last command copies the startup script in @build/panako@ to a directory in your path. The script allows for easy access to Panako's functionality. If this does not work for you, you can still call Panako using @java -jar ~/.panako/panako.jar [..args]@.

Panako decodes audio using by calling @ffmpeg@, an utility for decoding audio. If it is not present on your system, Panako automatically tries to download a suitable version. If this attempt fails, however, it needs to be installed manually and should be available on your systems path. On a Debian like system:

bc. apt-get install ffmpeg

Panako calls a sub-process (ffmpeg) and reads decoded PCM audio samples via a pipe. By default Panako calls @ffmpeg@. Alternatively, Panako can be configured to use any utility (like @avconv@) that can pipe decoded audio streams in the format PCM, one channel, 16bit per sample.

**Test Panako**. You might need a new shell to use @panako@.
	
bc. panako -v #prints version
panako stats #db info

h2(#usage). Panako Usage

Panako provides a command line interface, it can be called using **@panako subapplication [argument...]@**. For each task Panako has to perform, there is a subapplication. There are subapplications to store fingerprints, query audio fragments, monitor audio streams, and so on. Each subapplication has its own list of arguments, options, and output format that define the behavior of the subapplication.

To save some keystrokes the name of the subapplication can be shortened using a unique prefix. For example @panako m file.mp3@ is expanded to @panako monitor file.mp3@. Since both @stats@ and @store@ are valid subapplications the @store@ call can be shortened to @panako sto *.mp3@, @panako s *.mp3@ gives an invalid application message. A "trie":https://en.wikipedia.org/wiki/Trie is used to find a unique prefix. 

What follows is a list of those subapplications, their arguments, and respective goal.

h3(#store). Store Fingerprints - **@panako store@**

The @store@ instruction extracts fingerprints from audio tracks and stores those in the datastorage. The command expects a list of audio files, video files or a text file with a list of file names.

bc.. #Audio is converted automatically
panako store audio.mp3 audio.ogg audio.flac audio.wav 

#The first audio stream of video containers formats are used.
panako store audio.mpc audio.mp4 audio.acc audio.avi audio.ogv audio.wma 

#Glob characters can be practical
panako store */*.mp3

#A text file with audio files can be used as well
#The following searches for all mp3's (recursively) and
#stores them in a text file
find . -name '*.mp3' > list.txt
#Iterate the list
panako store list.txt

h3(#delete). Remove fingerprints  - **@panako delete@**

This application removes fingerprints from the index. It essentially reverses the @store@ operation. The operation can be checked with @panako stats@

@panako delete test.mp3@

The default key-value-store is backed by some kind of B-tree structure. Removing many elements from such structure might leave the tree in an unbalanced state, which results in worse performance. I am not sure about the performance implications of deletion for LMDB but it might be of interest to either rebuild the index or avoid deletion as much as possible. 


h3(#query). Query for Matches - **@panako query@**

The @query@ command extracts fingerprints from an audio frament and tries to match the fingerprints with the database. 
	
bc. panako query short_audio.mp3

h3(#monitor). Monitor Stream for Matches - **@panako monitor@**

The @query@ command extracts fingerprints from a short audio frament and tries to match the fingerprints with the database. The incoming audio is, by default, chopped in parts of 25s with an overlap of 5s. So every @25-5=20s@ the database is queried and a result is printed to the command line.
	
bc. panako monitor [short_audio.mp3]

If no audio file is given, the default microphone is used as input.


h3(#stats). Print Storage Statistics - **@panako stats@**

The @stats@ command prints statistics about the stored fingerprints and the number of audio fragments. If an integer argument is given it keeps printing the stats every x seconds.

bc. panako stats # print stats once
panako stats 20 # print stats every 20s 


h3(#configuration). Print Configuration - **@panako config@**

The @config@ subapplication prints the configuration currently in use.

bc. panako config

To override configuration values there are two options. The first option is to create a configuration file, by default at the following location: @~./panako/config.properties@. The configuration file is a properties text file. An commented configuration file should be included in the doc directory at @doc/config.properties@.

The second option to override configuration values is by adding them to the arguments of the command line call as follows: 

bc. panako subapplication CONFIG_KEY=value

For example, if you do not want to check for duplicate files while building a fingerprint database the following can be done:

bc. panako store file.mp3 CHECK_FOR_DUPLICATES=FALSE

The configuration values provided as a command line argument have priority over the ones in the configuration file. If there is no value configured a default is used automatically. To find out which configuration options are available and their respective functions, consult the documented example configuration file @doc/config.properties@.. 

h3(#resolve). Resolve an identifier for a filename - **@panako resolve@**

This application simply returns the identifier that is used internally for a filename. The following call returns for example @54657653@: 

@panako resolve test.mp3@
 
The internal identifiers are currently defined using integers.


h3(#same). Prints how similar two audio files are - **@panako same@**

This application checks the similarity of two files. The percentage returned indicates the percentage of seconds for which fingerprints match between the first and second file. So 100% that matches are found in every second. A result of 30% still means that much of the audio matches. 

@panako same first.mp3 second.mp3@

Note that this operation is performed in memory. Nothing changes on disk.


h2(#read). Further Reading

Some relevant reading material about acoustic fingerprinting. The order gives an idea of relevance to the Panako project. 

# Six, Joren and Leman, Marc "__Panako - A Scalable Acoustic Fingerprinting System Handling Time-Scale and Pitch Modification__":http://www.terasoft.com.tw/conf/ismir2014/proceedings/T048_122_Paper.pdf (2014)
# Wang, Avery L. __An Industrial-Strength Audio Search Algorithm__ (2003)
# Cano, Pedro and Batlle, Eloi and Kalker, Ton and Haitsma, Jaap __A Review of Audio Fingerprinting__ (2005)
# Six, Joren and Cornelis, Olmo __A Robust Audio Fingerprinter Based on Pitch Class Histograms - Applications for Ethnic Music Archives__ (2012)
# Arzt, Andreas and Bock, Sebastian and Widmer, Gerhard __Fast Identification of Piece and Score Position via Symbolic Fingerprinting__ (2012)
# Fenet, Sebastien and Richard, Gael and Grenier, Yves __A Scalable Audio Fingerprint Method with Robustness to Pitch-Shifting__ (2011)
# Ellis, Dan and Whitman, Brian and Porter, Alastair __Echoprint - An Open Music Identification Service__ (2011)
# Sonnleitner, Reinhard  and Widmer, Gerhard __Quad-based Audio Fingerprinting Robust To Time And Frequency Scaling__ (2014)
# Sonnleitner, Reinhard  and Widmer, Gerhard "__
Robust Quad-Based Audio Fingerprinting__":http://dx.doi.org/10.1109/TASLP.2015.2509248 (2015)


h2(#credits). Credits

The Panako software was developed at "IPEM, Ghent University":http://www.ipem.ugent.be/ by Joren Six.

Some parts of Panako were inspired by the "Robust Landmark-Based Audio Fingerprinting Matlab implementation by Dan Ellis":http://www.ee.columbia.edu/~dpwe/resources/matlab/fingerprint/.

If you use Panako for research purposes, please cite the following work:

bc. @inproceedings{six2014panako,
  author      = {Joren Six and Marc Leman},
  title       = {{Panako - A Scalable Acoustic Fingerprinting System Handling Time-Scale and Pitch Modification}},
  booktitle   = {{Proceedings of the 15th ISMIR Conference (ISMIR 2014)}}, 
  year        =  2014
}



h2(#ismir). Reproduce the ISMIR Paper Results

The directory @scripts/reproducibility@ contains scripts to reproduce the result found in the 
"Panako ISMIR 2014 paper":http://www.terasoft.com.tw/conf/ismir2014/proceedings/T048_122_Paper.pdf. The scripts follow this procedure:

# The Jamendo dataset is downloaded.
# The fingerprints are extracted and stored for each file in the data set.o download an openly available dataset
# Query files are created from the Jamendo data set.
# Panako is queried for each query file, results are logged
# Results are parsed.

To run the evaluation scripts, a UNIX like system with following utilities is required:

* ffmpeg: an utility to convert media files
* wget: an utility to download files
* "SoX":http://sox.sourceforge.net/, inlcuding support for MP3 and GSM encoding.
* bash: the bash shell
* "Ruby":https://www.ruby-lang.org/en/: The ruby programming language runtime environment.
* Unzip: to unzip the metadata file.

Evidently the panako software should also be installed. Please see above to install the Panako.

If all requirements are met, running the test is done using @bash run_experiment.bash@


h2(#changelog). Changelog

<dt>Version 1.5</dt><dd>2016-12-08</dd> Improvements to SyncSink. The cross correlation now behaves well also in edge cases. The Sync code has been simplified to allow maintenance. Included unit tests. Updated to TarsosDSP version 2.4.

<dt>Version 1.6</dt><dd>2017-03-17</dd> This release adds a simplified version of chromaprint and an implementation of "'A Highly Robust Audio Fingerprinting System' by Haitsma and Kalker":http://www.ismir2002.ismir.net/proceedings/02-FP04-2.pdf

<dt>Version 2.0</dt><dd>2021-04-27</dd> A major overhaul of Panako. The main aim of this release is to ensure the longevity and maintainability of Panako. The featureset has been reduced to focus on core functionality. The version bump is also explained by the use of lambdas and the need for a newer JRE (8+). A list of changes: 
* The number of dependencies has been drastically cut by removing support for multiple key-value stores. 
* The key-value store has been changed to a faster and simpler system (from MapDB to LMDB). 
* The SyncSink functionality has been moved to another project (with Panako as dependency). 
* The main algorithms have been replaced with simpler and better working versions:
** Olaf is a new implementation of the classic Shazam algorithm. 
** The algoritm described in the Panako paper was also replaced. The core ideas are still the same. The main change is the use of a "Gabor transform":https://en.wikipedia.org/wiki/Gabor_transform to go from time domain to the spectral domain (previously a constant-q transform was used).  The gabor transform is implemented by "JGaborator":https://github.com/JorenSix/JGaborator which in turn relies on "The Gaborator":https://gaborator.com/ C++ library via JNI. 
* Folder structure has been simplified.
* The UI which was mainly used for debugging has been removed.
* A new set of helper scripts are added in the @scripts@ directory. They help with evaluation, parsing results, checking results, building panako, creating documentation,...
* Changed the default panako location to ~/.panako, so users can install and use panako more easily (withouth need for sudo rights)
 